function chunkWalletAddress(t){var e,n,a=[];for(a.push(t.substr(0,2)),e=2,n=t.length;e<n;e+=4)a.push(t.substr(e,4));return a}const Web3=require("web3"),contractAddress="0x554ab5f5fe7006223c2dd321b420e9a05d48ec93";var accounts,account,policyContract;window.App={start:function(){var t=JSON.parse('[ { "constant": false, "inputs": [ { "name": "policyOwner", "type": "address" } ], "name": "confirmPolicy", "outputs": [], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "totalInsurers", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "type": "function" }, { "constant": false, "inputs": [ { "name": "itemId", "type": "string" }, { "name": "deviceBrand", "type": "string" }, { "name": "deviceYear", "type": "string" }, { "name": "wearLevel", "type": "string" }, { "name": "region", "type": "string" } ], "name": "insure", "outputs": [ { "name": "insured", "type": "bool" } ], "payable": true, "type": "function" }, { "constant": false, "inputs": [ { "name": "wearLevel", "type": "uint256" } ], "name": "claim", "outputs": [ { "name": "", "type": "bool" } ], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "getPolicyEndDateTimestamp", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "totalInvestedAmount", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "totalClaimsPaid", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "address" } ], "name": "investors", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "totalInvestorsCount", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "getPolicyNextPayment", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "basePremium", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "type": "function" }, { "constant": true, "inputs": [ { "name": "deviceBrand", "type": "string" }, { "name": "deviceYear", "type": "string" }, { "name": "wearLevel", "type": "string" }, { "name": "region", "type": "string" } ], "name": "policyPrice", "outputs": [ { "name": "price", "type": "uint256" } ], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "maxPayout", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "claimed", "outputs": [ { "name": "", "type": "bool" } ], "payable": false, "type": "function" }, { "constant": false, "inputs": [], "name": "invest", "outputs": [ { "name": "success", "type": "bool" } ], "payable": true, "type": "function" }, { "inputs": [], "payable": true, "type": "constructor" }, { "payable": true, "type": "fallback" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "deviceName", "type": "string" }, { "indexed": false, "name": "insurancePrice", "type": "uint256" } ], "name": "Insured", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "payout", "type": "uint256" } ], "name": "Claimed", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "value", "type": "uint256" } ], "name": "Invested", "type": "event" } ]'),e=web3.eth.contract(t);policyContract=e.at(contractAddress),web3.eth.getAccounts(function(t,e){if(null!=t)return console.log(t),void alert("There was an error fetching contract.");if(0==e.length)return void App.displayNoWalletModal();accounts=e,account=accounts[0];var n=chunkWalletAddress(account).join(" ");$("#wallet_address").html(n),web3.eth.getBalance(account,function(t,e){if(t)console.log(t),alert("There was an error fetching contract.");else{var n=web3.fromWei(e.toNumber(),"ether");$("#wallet_balance").html(n)}}),policyContract.investors(account,function(t,e){if(null!=t)return console.log(t),void alert("There was an error fetching contract.6");var n=web3.fromWei(e,"ether");$("#invested").html(n.toString()),0==n?$("#projectedProfit").html("20% of an investment"):$("#projectedProfit").html((1.2*n).toFixed(4).toString())})}),policyContract.totalInsurers.call(function(t,e){if(null!=t)return void alert("There was an error fetching contract. 5");$("#totalInsurers").html(e.toString()),$("#totalInsurers_table").html(e.toString())}),policyContract.totalClaimsPaid.call(function(t,e){if(null!=t)return console.log(t),void alert("There was an error fetching contract. 4");var n=web3.fromWei(e.toString(),"ether");$("#totalClaimsPaid").html(n.toString()),$("#totalClaimsPaid_table").html(n.toString())}),policyContract.totalInvestedAmount.call(account,function(t,e){if(null!=t)return console.log(t),void alert("There was an error fetching contract. 3");var n=web3.fromWei(e,"ether");$("#totalInvestedAmount").html(n.toString()),$("#totalInvestedAmount_table").html(n.toString()),$("#predictedProfit_table").html("20%")}),policyContract.totalInvestorsCount.call(account,function(t,e){if(null!=t)return console.log(t),void alert("There was an error fetching contract. 2");$("#totalInvestorsCount").html(e.toString()),$("#totalInvestorsCount_table").html(e.toString())}),web3.eth.getBalance(contractAddress,function(t,e){if(null!=t)return console.log(t),void alert("There was an error fetching contract. 1");var n=web3.fromWei(e,"ether");$("#totalContractBalance").html((1*n).toFixed(4).toString())})},investMoney:function(){var t=$("#enterValue").val(),e=web3.toWei(t,"ether");policyContract.invest(e,{gas:3e5,from:account,value:e},function(t,e){if(null!=t)return console.log(t),$("#modalTitle").html("Investment was canceled."),$("#modalText").html("Transaction is canceled."),void $("#generalModal").modal("show");var n="https://ropsten.etherscan.io/tx/"+e;$("#modalTitle").html("Investment Successful"),$("#modalText").html('Great success! Transaction has been sent. Ethers should apear in the wallet any moment (it might take up to a few minutes). You can check progress here: </br></br><a href="'+n+'" target="_blank">'+n+"</a>"),$("#generalModal").modal("show")})},displayNoWalletModal:function(){$("#modalTitle").html("This application works only in Ropsten Test Network"),$("#modalText").html("Make sure your Ethereum client(MetaMask or Misk browser) is configured correctly and switched to Ropsten test network."),$("#generalModal").modal("show")}},window.addEventListener("load",function(){"undefined"!=typeof web3?(window.web3=new Web3(web3.currentProvider),web3.version.getNetwork(function(t,e){switch(e){case"3":break;default:App.displayNoWalletModal()}})):App.displayNoWalletModal(),App.start()});